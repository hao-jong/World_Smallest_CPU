-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- --------------------------------------------------------------------------------
-- Tool Version: Vivado v.2024.1 (win64) Build 5076996 Wed May 22 18:37:14 MDT 2024
-- Date        : Tue Feb  4 20:35:34 2025
-- Host        : COMSYS01 running 64-bit major release  (build 9200)
-- Command     : write_vhdl -force -mode funcsim
--               c:/FPGA_project/RV32I_WSC/RV32I_WSC.gen/sources_1/bd/RV32I_WSC/ip/RV32I_WSC_reg_IDEX_0_0/RV32I_WSC_reg_IDEX_0_0_sim_netlist.vhdl
-- Design      : RV32I_WSC_reg_IDEX_0_0
-- Purpose     : This VHDL netlist is a functional simulation representation of the design and should not be modified or
--               synthesized. This netlist cannot be used for SDF annotated simulation.
-- Device      : xc7z007sclg400-1
-- --------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
library UNISIM;
use UNISIM.VCOMPONENTS.ALL;
entity RV32I_WSC_reg_IDEX_0_0 is
  port (
    clk : in STD_LOGIC;
    rst : in STD_LOGIC;
    flush : in STD_LOGIC;
    pc_vs_rs1_con_in : in STD_LOGIC_VECTOR ( 1 downto 0 );
    alusrc_in : in STD_LOGIC_VECTOR ( 1 downto 0 );
    aluop_in : in STD_LOGIC_VECTOR ( 2 downto 0 );
    jalr_mux_in : in STD_LOGIC;
    branch_in : in STD_LOGIC;
    memwrite_in : in STD_LOGIC;
    memread_in : in STD_LOGIC;
    memtoreg_in : in STD_LOGIC;
    regwrite_in : in STD_LOGIC;
    IDEX_update_disable : in STD_LOGIC;
    program_counter_in : in STD_LOGIC_VECTOR ( 31 downto 0 );
    read_register1_in : in STD_LOGIC_VECTOR ( 4 downto 0 );
    read_register2_in : in STD_LOGIC_VECTOR ( 4 downto 0 );
    read_data1_in : in STD_LOGIC_VECTOR ( 31 downto 0 );
    read_data2_in : in STD_LOGIC_VECTOR ( 31 downto 0 );
    imm_gen_in : in STD_LOGIC_VECTOR ( 31 downto 0 );
    funct3_in : in STD_LOGIC_VECTOR ( 2 downto 0 );
    instruction30_in : in STD_LOGIC;
    write_register_in : in STD_LOGIC_VECTOR ( 4 downto 0 );
    branch : out STD_LOGIC;
    memwrite : out STD_LOGIC;
    memread : out STD_LOGIC;
    memtoreg : out STD_LOGIC;
    regwrite : out STD_LOGIC;
    pc_vs_rs1_con : out STD_LOGIC_VECTOR ( 1 downto 0 );
    alusrc : out STD_LOGIC_VECTOR ( 1 downto 0 );
    aluop : out STD_LOGIC_VECTOR ( 2 downto 0 );
    jalr_mux : out STD_LOGIC;
    program_counter : out STD_LOGIC_VECTOR ( 31 downto 0 );
    read_register1 : out STD_LOGIC_VECTOR ( 4 downto 0 );
    read_register2 : out STD_LOGIC_VECTOR ( 4 downto 0 );
    read_data1 : out STD_LOGIC_VECTOR ( 31 downto 0 );
    read_data2 : out STD_LOGIC_VECTOR ( 31 downto 0 );
    imm_gen : out STD_LOGIC_VECTOR ( 31 downto 0 );
    funct3 : out STD_LOGIC_VECTOR ( 2 downto 0 );
    instruction30 : out STD_LOGIC;
    write_register : out STD_LOGIC_VECTOR ( 4 downto 0 )
  );
  attribute NotValidForBitStream : boolean;
  attribute NotValidForBitStream of RV32I_WSC_reg_IDEX_0_0 : entity is true;
  attribute CHECK_LICENSE_TYPE : string;
  attribute CHECK_LICENSE_TYPE of RV32I_WSC_reg_IDEX_0_0 : entity is "RV32I_WSC_reg_IDEX_0_0,reg_IDEX,{}";
  attribute DowngradeIPIdentifiedWarnings : string;
  attribute DowngradeIPIdentifiedWarnings of RV32I_WSC_reg_IDEX_0_0 : entity is "yes";
  attribute IP_DEFINITION_SOURCE : string;
  attribute IP_DEFINITION_SOURCE of RV32I_WSC_reg_IDEX_0_0 : entity is "module_ref";
  attribute X_CORE_INFO : string;
  attribute X_CORE_INFO of RV32I_WSC_reg_IDEX_0_0 : entity is "reg_IDEX,Vivado 2024.1";
end RV32I_WSC_reg_IDEX_0_0;

architecture STRUCTURE of RV32I_WSC_reg_IDEX_0_0 is
  signal \<const0>\ : STD_LOGIC;
  attribute X_INTERFACE_INFO : string;
  attribute X_INTERFACE_INFO of clk : signal is "xilinx.com:signal:clock:1.0 clk CLK";
  attribute X_INTERFACE_PARAMETER : string;
  attribute X_INTERFACE_PARAMETER of clk : signal is "XIL_INTERFACENAME clk, ASSOCIATED_RESET rst, FREQ_HZ 100000000, FREQ_TOLERANCE_HZ 0, PHASE 0.0, INSERT_VIP 0";
  attribute X_INTERFACE_INFO of rst : signal is "xilinx.com:signal:reset:1.0 rst RST";
  attribute X_INTERFACE_PARAMETER of rst : signal is "XIL_INTERFACENAME rst, POLARITY ACTIVE_LOW, INSERT_VIP 0";
begin
  aluop(2) <= \<const0>\;
  aluop(1) <= \<const0>\;
  aluop(0) <= \<const0>\;
  alusrc(1) <= \<const0>\;
  alusrc(0) <= \<const0>\;
  branch <= \<const0>\;
  funct3(2) <= \<const0>\;
  funct3(1) <= \<const0>\;
  funct3(0) <= \<const0>\;
  imm_gen(31) <= \<const0>\;
  imm_gen(30) <= \<const0>\;
  imm_gen(29) <= \<const0>\;
  imm_gen(28) <= \<const0>\;
  imm_gen(27) <= \<const0>\;
  imm_gen(26) <= \<const0>\;
  imm_gen(25) <= \<const0>\;
  imm_gen(24) <= \<const0>\;
  imm_gen(23) <= \<const0>\;
  imm_gen(22) <= \<const0>\;
  imm_gen(21) <= \<const0>\;
  imm_gen(20) <= \<const0>\;
  imm_gen(19) <= \<const0>\;
  imm_gen(18) <= \<const0>\;
  imm_gen(17) <= \<const0>\;
  imm_gen(16) <= \<const0>\;
  imm_gen(15) <= \<const0>\;
  imm_gen(14) <= \<const0>\;
  imm_gen(13) <= \<const0>\;
  imm_gen(12) <= \<const0>\;
  imm_gen(11) <= \<const0>\;
  imm_gen(10) <= \<const0>\;
  imm_gen(9) <= \<const0>\;
  imm_gen(8) <= \<const0>\;
  imm_gen(7) <= \<const0>\;
  imm_gen(6) <= \<const0>\;
  imm_gen(5) <= \<const0>\;
  imm_gen(4) <= \<const0>\;
  imm_gen(3) <= \<const0>\;
  imm_gen(2) <= \<const0>\;
  imm_gen(1) <= \<const0>\;
  imm_gen(0) <= \<const0>\;
  instruction30 <= \<const0>\;
  jalr_mux <= \<const0>\;
  memread <= \<const0>\;
  memtoreg <= \<const0>\;
  memwrite <= \<const0>\;
  pc_vs_rs1_con(1) <= \<const0>\;
  pc_vs_rs1_con(0) <= \<const0>\;
  program_counter(31) <= \<const0>\;
  program_counter(30) <= \<const0>\;
  program_counter(29) <= \<const0>\;
  program_counter(28) <= \<const0>\;
  program_counter(27) <= \<const0>\;
  program_counter(26) <= \<const0>\;
  program_counter(25) <= \<const0>\;
  program_counter(24) <= \<const0>\;
  program_counter(23) <= \<const0>\;
  program_counter(22) <= \<const0>\;
  program_counter(21) <= \<const0>\;
  program_counter(20) <= \<const0>\;
  program_counter(19) <= \<const0>\;
  program_counter(18) <= \<const0>\;
  program_counter(17) <= \<const0>\;
  program_counter(16) <= \<const0>\;
  program_counter(15) <= \<const0>\;
  program_counter(14) <= \<const0>\;
  program_counter(13) <= \<const0>\;
  program_counter(12) <= \<const0>\;
  program_counter(11) <= \<const0>\;
  program_counter(10) <= \<const0>\;
  program_counter(9) <= \<const0>\;
  program_counter(8) <= \<const0>\;
  program_counter(7) <= \<const0>\;
  program_counter(6) <= \<const0>\;
  program_counter(5) <= \<const0>\;
  program_counter(4) <= \<const0>\;
  program_counter(3) <= \<const0>\;
  program_counter(2) <= \<const0>\;
  program_counter(1) <= \<const0>\;
  program_counter(0) <= \<const0>\;
  read_data1(31) <= \<const0>\;
  read_data1(30) <= \<const0>\;
  read_data1(29) <= \<const0>\;
  read_data1(28) <= \<const0>\;
  read_data1(27) <= \<const0>\;
  read_data1(26) <= \<const0>\;
  read_data1(25) <= \<const0>\;
  read_data1(24) <= \<const0>\;
  read_data1(23) <= \<const0>\;
  read_data1(22) <= \<const0>\;
  read_data1(21) <= \<const0>\;
  read_data1(20) <= \<const0>\;
  read_data1(19) <= \<const0>\;
  read_data1(18) <= \<const0>\;
  read_data1(17) <= \<const0>\;
  read_data1(16) <= \<const0>\;
  read_data1(15) <= \<const0>\;
  read_data1(14) <= \<const0>\;
  read_data1(13) <= \<const0>\;
  read_data1(12) <= \<const0>\;
  read_data1(11) <= \<const0>\;
  read_data1(10) <= \<const0>\;
  read_data1(9) <= \<const0>\;
  read_data1(8) <= \<const0>\;
  read_data1(7) <= \<const0>\;
  read_data1(6) <= \<const0>\;
  read_data1(5) <= \<const0>\;
  read_data1(4) <= \<const0>\;
  read_data1(3) <= \<const0>\;
  read_data1(2) <= \<const0>\;
  read_data1(1) <= \<const0>\;
  read_data1(0) <= \<const0>\;
  read_data2(31) <= \<const0>\;
  read_data2(30) <= \<const0>\;
  read_data2(29) <= \<const0>\;
  read_data2(28) <= \<const0>\;
  read_data2(27) <= \<const0>\;
  read_data2(26) <= \<const0>\;
  read_data2(25) <= \<const0>\;
  read_data2(24) <= \<const0>\;
  read_data2(23) <= \<const0>\;
  read_data2(22) <= \<const0>\;
  read_data2(21) <= \<const0>\;
  read_data2(20) <= \<const0>\;
  read_data2(19) <= \<const0>\;
  read_data2(18) <= \<const0>\;
  read_data2(17) <= \<const0>\;
  read_data2(16) <= \<const0>\;
  read_data2(15) <= \<const0>\;
  read_data2(14) <= \<const0>\;
  read_data2(13) <= \<const0>\;
  read_data2(12) <= \<const0>\;
  read_data2(11) <= \<const0>\;
  read_data2(10) <= \<const0>\;
  read_data2(9) <= \<const0>\;
  read_data2(8) <= \<const0>\;
  read_data2(7) <= \<const0>\;
  read_data2(6) <= \<const0>\;
  read_data2(5) <= \<const0>\;
  read_data2(4) <= \<const0>\;
  read_data2(3) <= \<const0>\;
  read_data2(2) <= \<const0>\;
  read_data2(1) <= \<const0>\;
  read_data2(0) <= \<const0>\;
  read_register1(4) <= \<const0>\;
  read_register1(3) <= \<const0>\;
  read_register1(2) <= \<const0>\;
  read_register1(1) <= \<const0>\;
  read_register1(0) <= \<const0>\;
  read_register2(4) <= \<const0>\;
  read_register2(3) <= \<const0>\;
  read_register2(2) <= \<const0>\;
  read_register2(1) <= \<const0>\;
  read_register2(0) <= \<const0>\;
  regwrite <= \<const0>\;
  write_register(4) <= \<const0>\;
  write_register(3) <= \<const0>\;
  write_register(2) <= \<const0>\;
  write_register(1) <= \<const0>\;
  write_register(0) <= \<const0>\;
GND: unisim.vcomponents.GND
     port map (
      G => \<const0>\
    );
end STRUCTURE;
