.section .data
.align 2  # 4바이트 경계 정렬 (int 타입 크기에 맞춤)
array:  .word 5, 2, 8, 1, 9  # 정렬할 5개의 값 (int 타입)
array_size: .word 5          # 배열의 크기 (요소 개수)

.section .text
.global _start
_start:
    # bubsort 함수 호출 준비
    la a0, array      # a0에 배열의 주소를 로드 (int *list)
    lw a1, array_size  # a1에 배열의 크기를 로드 (size)
    jal ra, bubsort   # bubsort 함수 호출
    li a7, 93
    ecall

# bubsort 함수 (RV32I 버전)
.global bubsort
bubsort:
    # a0 = int *list
    # a1 = size
    # t0 = swapped
    # t1 = i
1: # do loop
    li t0, 0          # swapped = false
    li t1, 1          # i = 1
2: # for loop
    bge t1, a1, 2f    # break if i >= size
    slli t3, t1, 2    # scale i by 4 (for int)
    add t3, a0, t3    # new scaled memory address
    lw  t4, -4(t3)    # load list[i-1] into t4
    lw  t5, 0(t3)     # load list[i] into t5
    ble t4, t5, 3f    # if list[i-1] < list[i], it's in position
    # if we get here, we need to swap
    li  t0, 1         # swapped = true
    sw  t4, 0(t3)     # list[i] = list[i-1]
    sw  t5, -4(t3)    # list[i-1] = list[i]
3: # bottom of for loop body
    addi t1, t1, 1    # i++
    j    2b           # loop again
2: # bottom of do loop body
    bnez t0, 1b       # loop if swapped = true
    ret               # return via return address register